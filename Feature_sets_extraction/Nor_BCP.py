'''
The code on this page is used to Normalize the BCP feature set generated by Generate_BCP&SICP.py
'''
import pandas as pd
import numpy as np
from Feature_sets_extraction.methods import generate_bin,replace_linetodot

def Normalization(list):
    Min = min(list)
    Max = max(list)
    if Max- Min == 0:
        return list
    list = [(i-Min)/(Max-Min) for i in list]
    return list

def stacking_model():
    path = "../Data/new_cell_inf.txt"
    cell_inf = pd.read_table(path, sep=' ', header='infer', names=None, index_col=None, dtype=None, engine=None,
                             nrows=None)
    cell_inf = cell_inf.sort_values(by='cycle', ascending=True)
    X = np.array(cell_inf.values.tolist())[:, 0:1]
    file_path = "../Data/BCP/Full_chr/Multi_channel/BCP(chr).npy"
    Dict = np.load(file_path, allow_pickle=True).item()
    index = generate_bin()
    print("start")
    chr_list = sorted(index.keys())
    for chr in chr_list:
        cell_list = []
        cell_matrix = []
        for cell in X:
            cell_name = replace_linetodot(cell[0]) + "_reads"
            cell_matrix.append(Dict[cell_name][chr])
            cell_list.append(cell_name)
        cell_matrix = np.array(cell_matrix)
        for i in range(cell_matrix.shape[1]):
            print(i)
            cell_matrix[:, i] = Normalization(cell_matrix[:, i])
        for id, cell_nm in enumerate(cell_list):
            Dict[cell_nm][chr] = cell_matrix[id, :]
    out_path1 = '../Data/BCP/Full_chr/Multi_channel/Nor/BCP(chr).npy'
    np.save(out_path1, Dict)



stacking_model()